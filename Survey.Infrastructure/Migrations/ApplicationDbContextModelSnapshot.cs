// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Survey.Infrastructure.Data;

namespace Survey.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "9e4d9708-04e6-4acf-a9e7-7d5a7b527ede",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "08f1828e-08f6-4c33-87c4-2ea556c9f75e",
                            Name = "Dean",
                            NormalizedName = "DEAN"
                        },
                        new
                        {
                            Id = "5",
                            ConcurrencyStamp = "09b96a13-c7bd-4066-9d23-a600044a0d1b",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "29373141-f981-4e07-9e32-009212b2a147",
                            Name = "Professor",
                            NormalizedName = "PROFESSOR"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "7fc46614-5cdf-4612-a597-ababad39c97b",
                            Name = "QA",
                            NormalizedName = "QA"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Survey.View",
                            RoleId = "5"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Survey.Collect",
                            RoleId = "5"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Survey.ViewAll",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Survey.View",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Survey.Create",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Survey.Update",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Survey.Delete",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Survey.Collect",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Survey.SeeSurveyResults",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Survey.Publish",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.User.ViewUsers",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.User.UpdateUser",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.User.DeleteUser",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.User.AddUser",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Role.Add",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Role.Delete",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Role.PermissionsView",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Role.View",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Project.Add",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Project.Delete",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Project.Update",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Project.View",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Category.Add",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Category.AssignUsers",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Category.Delete",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 26,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Category.Update",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 27,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Category.View",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 28,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.DataSet.AddCases",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 29,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.DataSet.AssignCases",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 30,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.DataSet.DeleteCases",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 31,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.DataSet.ViewCases",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 32,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.DataSet.UpdateCases",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 33,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Survey.ViewAll",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 34,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Survey.View",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 35,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Survey.Create",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 36,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Survey.Update",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 37,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Survey.Delete",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 38,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Survey.Collect",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 39,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Survey.SeeSurveyResults",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 40,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Survey.Publish",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 41,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.User.ViewUsers",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 42,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.User.UpdateUser",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 43,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.User.DeleteUser",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 44,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.User.AddUser",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 45,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Role.Add",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 46,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Role.Delete",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 47,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Role.PermissionsView",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 48,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Role.View",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 49,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Project.Add",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 50,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Project.Delete",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 51,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Project.Update",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 52,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Project.View",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 53,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Category.Add",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 54,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Category.AssignUsers",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 55,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Category.Delete",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 56,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Category.Update",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 57,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.Category.View",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 58,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.DataSet.AddCases",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 59,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.DataSet.AssignCases",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 60,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.DataSet.DeleteCases",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 61,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.DataSet.ViewCases",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 62,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.DataSet.UpdateCases",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de6ef7fa-5c68-41f0-9f48-2dc0408b18bc",
                            Email = "admin@riinvest.net",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@RIINVEST.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEGVA3ewO5lma8KUANvtLM1Jw6gop88ssHCsra3AxXBi9o4n7mDN7rXqWxrhwutYMpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fdc241dd-1092-471a-8822-063290b04dfa",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Survey.Core.Models.Answers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Form_Id")
                        .HasColumnType("int");

                    b.Property<int?>("OptionId")
                        .HasColumnType("int");

                    b.Property<int>("Question_Id")
                        .HasColumnType("int");

                    b.Property<int?>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Form_Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("Question_Id");

                    b.HasIndex("SubmissionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Survey.Core.Models.CaseAssignedForms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Assigned_Form")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseExcelData_Id")
                        .HasColumnType("int");

                    b.Property<int>("Case_Id")
                        .HasColumnType("int");

                    b.Property<int>("Dataset_Id")
                        .HasColumnType("int");

                    b.Property<int>("Form_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CaseAssignedForms");
                });

            modelBuilder.Entity("Survey.Core.Models.CaseAssignedUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Assigned_To")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Assigned_Type")
                        .HasColumnType("int");

                    b.Property<string>("Assigned_to_Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseExcelData_Id")
                        .HasColumnType("int");

                    b.Property<int>("Case_Id")
                        .HasColumnType("int");

                    b.Property<int>("Dataset_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CaseAssignedIdentityUsers");
                });

            modelBuilder.Entity("Survey.Core.Models.Cases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseData_Id")
                        .HasColumnType("int");

                    b.Property<int>("Dataset_Id")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Dataset_Id");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("Survey.Core.Models.CasesExcelData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Case_Id")
                        .HasColumnType("int");

                    b.Property<string>("Cell_Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dataset_Id")
                        .HasColumnType("int");

                    b.Property<int>("Header_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Dataset_Id");

                    b.ToTable("CasesExcelData");
                });

            modelBuilder.Entity("Survey.Core.Models.CasesExcelHeaders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Column_Id")
                        .HasColumnType("int");

                    b.Property<int>("Dataset_Id")
                        .HasColumnType("int");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Dataset_Id");

                    b.ToTable("CasesExcelHeaders");
                });

            modelBuilder.Entity("Survey.Core.Models.Dataset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("No_Cases")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type_of_TA")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Dataset");
                });

            modelBuilder.Entity("Survey.Core.Models.EnrollDataset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Dataset_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Dataset_Id");

                    b.ToTable("EnrollDataset");
                });

            modelBuilder.Entity("Survey.Core.Models.Forms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Form_Status")
                        .HasColumnType("int");

                    b.Property<int?>("Project_Id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("WasPublished")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Project_Id");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("Survey.Core.Models.ProjectCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentID");

                    b.ToTable("ProjectCategories");
                });

            modelBuilder.Entity("Survey.Core.Models.Projects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("ProjectCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCategoryId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Survey.Core.Models.QuestionOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int>("Question_Id")
                        .HasColumnType("int");

                    b.Property<bool>("isSelected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Question_Id");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("Survey.Core.Models.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Field_Type")
                        .HasColumnType("int");

                    b.Property<int>("Form_Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionOrder")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkipLogicType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Form_Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Survey.Core.Models.SkipLogic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Child_Question_Id")
                        .HasColumnType("int");

                    b.Property<double?>("Comparable_Value")
                        .HasColumnType("float");

                    b.Property<int?>("Condition_Option")
                        .HasColumnType("int");

                    b.Property<int>("Operator")
                        .HasColumnType("int");

                    b.Property<int>("Parent_Question_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Child_Question_Id");

                    b.HasIndex("Condition_Option");

                    b.HasIndex("Parent_Question_Id");

                    b.ToTable("SkipLogic");
                });

            modelBuilder.Entity("Survey.Core.Models.SurveyDownload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DownloadType")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyDownloads");
                });

            modelBuilder.Entity("Survey.Core.Models.SurveySubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubmitFromIP")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CaseId");

                    b.HasIndex("FormId");

                    b.ToTable("SurveySubmissions");
                });

            modelBuilder.Entity("Survey.Core.Models.UserProject", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectsId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProjectsId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("UserProject");
                });

            modelBuilder.Entity("Survey.Core.Models.UserProjectCategory", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("UserProjectCategories");
                });

            modelBuilder.Entity("Survey.Core.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Survey.Core.Models.Answers", b =>
                {
                    b.HasOne("Survey.Core.Models.Forms", "form")
                        .WithMany("Answers")
                        .HasForeignKey("Form_Id");

                    b.HasOne("Survey.Core.Models.QuestionOptions", "Option")
                        .WithMany("OptionAnswer")
                        .HasForeignKey("OptionId");

                    b.HasOne("Survey.Core.Models.Questions", "question")
                        .WithMany("Answers")
                        .HasForeignKey("Question_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survey.Core.Models.SurveySubmission", "Submission")
                        .WithMany("Answers")
                        .HasForeignKey("SubmissionId");

                    b.Navigation("form");

                    b.Navigation("Option");

                    b.Navigation("question");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Survey.Core.Models.Cases", b =>
                {
                    b.HasOne("Survey.Core.Models.Dataset", "dataset")
                        .WithMany()
                        .HasForeignKey("Dataset_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("dataset");
                });

            modelBuilder.Entity("Survey.Core.Models.CasesExcelData", b =>
                {
                    b.HasOne("Survey.Core.Models.Dataset", "dataset")
                        .WithMany()
                        .HasForeignKey("Dataset_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("dataset");
                });

            modelBuilder.Entity("Survey.Core.Models.CasesExcelHeaders", b =>
                {
                    b.HasOne("Survey.Core.Models.Dataset", "dataset")
                        .WithMany()
                        .HasForeignKey("Dataset_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("dataset");
                });

            modelBuilder.Entity("Survey.Core.Models.EnrollDataset", b =>
                {
                    b.HasOne("Survey.Core.Models.Dataset", "dataset")
                        .WithMany()
                        .HasForeignKey("Dataset_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("dataset");
                });

            modelBuilder.Entity("Survey.Core.Models.Forms", b =>
                {
                    b.HasOne("Survey.Core.Models.Projects", "Project")
                        .WithMany()
                        .HasForeignKey("Project_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Survey.Core.Models.ProjectCategory", b =>
                {
                    b.HasOne("Survey.Core.Models.ProjectCategory", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Survey.Core.Models.Projects", b =>
                {
                    b.HasOne("Survey.Core.Models.ProjectCategory", "ProjectCategory")
                        .WithMany()
                        .HasForeignKey("ProjectCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectCategory");
                });

            modelBuilder.Entity("Survey.Core.Models.QuestionOptions", b =>
                {
                    b.HasOne("Survey.Core.Models.Questions", "question")
                        .WithMany("Options")
                        .HasForeignKey("Question_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("question");
                });

            modelBuilder.Entity("Survey.Core.Models.Questions", b =>
                {
                    b.HasOne("Survey.Core.Models.Forms", "form")
                        .WithMany("Questions")
                        .HasForeignKey("Form_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("form");
                });

            modelBuilder.Entity("Survey.Core.Models.SkipLogic", b =>
                {
                    b.HasOne("Survey.Core.Models.Questions", "ChildQuestion")
                        .WithMany("skipChild")
                        .HasForeignKey("Child_Question_Id")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("Survey.Core.Models.QuestionOptions", "Option")
                        .WithMany("ChildOption")
                        .HasForeignKey("Condition_Option");

                    b.HasOne("Survey.Core.Models.Questions", "ParentQuestion")
                        .WithMany("skipParent")
                        .HasForeignKey("Parent_Question_Id")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("ChildQuestion");

                    b.Navigation("Option");

                    b.Navigation("ParentQuestion");
                });

            modelBuilder.Entity("Survey.Core.Models.SurveyDownload", b =>
                {
                    b.HasOne("Survey.Core.Models.Forms", "Form")
                        .WithMany("SurveyDownloads")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survey.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Form");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Survey.Core.Models.SurveySubmission", b =>
                {
                    b.HasOne("Survey.Core.Models.ApplicationUser", "Agent")
                        .WithMany("SurveySubmissions")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Survey.Core.Models.Cases", "Case")
                        .WithMany("Submissions")
                        .HasForeignKey("CaseId");

                    b.HasOne("Survey.Core.Models.Forms", "Form")
                        .WithMany("Submissions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Case");

                    b.Navigation("Form");
                });

            modelBuilder.Entity("Survey.Core.Models.UserProject", b =>
                {
                    b.HasOne("Survey.Core.Models.Projects", "Projects")
                        .WithMany("UserList")
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survey.Core.Models.ApplicationUser", "User")
                        .WithMany("ProjectList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projects");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Survey.Core.Models.UserProjectCategory", b =>
                {
                    b.HasOne("Survey.Core.Models.ProjectCategory", "Category")
                        .WithMany("UserList")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survey.Core.Models.ApplicationUser", "User")
                        .WithMany("CategoryList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Survey.Core.Models.Cases", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("Survey.Core.Models.Forms", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Questions");

                    b.Navigation("Submissions");

                    b.Navigation("SurveyDownloads");
                });

            modelBuilder.Entity("Survey.Core.Models.ProjectCategory", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("UserList");
                });

            modelBuilder.Entity("Survey.Core.Models.Projects", b =>
                {
                    b.Navigation("UserList");
                });

            modelBuilder.Entity("Survey.Core.Models.QuestionOptions", b =>
                {
                    b.Navigation("ChildOption");

                    b.Navigation("OptionAnswer");
                });

            modelBuilder.Entity("Survey.Core.Models.Questions", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Options");

                    b.Navigation("skipChild");

                    b.Navigation("skipParent");
                });

            modelBuilder.Entity("Survey.Core.Models.SurveySubmission", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Survey.Core.Models.ApplicationUser", b =>
                {
                    b.Navigation("CategoryList");

                    b.Navigation("ProjectList");

                    b.Navigation("SurveySubmissions");
                });
#pragma warning restore 612, 618
        }
    }
}
